#include <ESP32Servo.h>
#include <BluetoothSerial.h>

BluetoothSerial SerialBT;
Servo myServo;

int motorPin1 = 18; // GPIO 18
int motorPin2 = 19; // GPIO 19
int motorPin3 = 23; // GPIO 23
int motorPin4 = 22; // GPIO 22
int servoPin = 5;   // GPIO 5
int metalDetectPin = 21; // GPIO 21 for metal detection switch

String sliderValue = "";  // For storing the slider values
unsigned long previousMillis = 0; 
const long helloInterval = 1000;  // Interval to send "Hello" every 1 second

void setup() {
  // Set motor pins as output
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);

  // Attach the servo motor
  myServo.attach(servoPin);
  myServo.write(90);  // Set initial servo position

  // Initialize Bluetooth serial communication
  SerialBT.begin("ESP32_Car");  // Bluetooth device name
  Serial.begin(9600);
  Serial.println("Bluetooth Car Ready");

  // Set metal detection pin as input
  pinMode(metalDetectPin, INPUT);
}

void loop() {
  // Check for real-time servo control first
  handleSliderControl();

  // Check the metal detector state
  int metalDetectState = digitalRead(metalDetectPin);
  if (metalDetectState == HIGH) {
    SerialBT.println("Metal Detected");
    Serial.println("Metal Detected");  // Update serial monitor
  } else {
    SerialBT.println("Metal Not Detected");
    Serial.println("Metal Not Detected");  // Update serial monitor
  }

  // Send "Hello" message every second
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= helloInterval) {
    previousMillis = currentMillis;
    SerialBT.println("Hello");
    Serial.println("Hello");  // Update serial monitor with "Hello"
  }

  // Handle movement commands
  handleMovementCommands();
}

// Function to handle slider control for the servo
void handleSliderControl() {
  while (SerialBT.available()) {
    char receivedChar = SerialBT.read();

    // Check if the incoming characters are for the slider value
    if (isDigit(receivedChar)) {
      sliderValue += receivedChar;  // Accumulate slider value characters
    } else if (receivedChar == 'X') {  // 'X' signals end of slider value input
      if (sliderValue.length() > 0) {
        int sliderPosition = sliderValue.toInt();  // Convert slider value to int
        int servoPosition = map(sliderPosition, 0, 100, 0, 180);  
        myServo.write(servoPosition);  // Instantly update the servo position
        Serial.print("Servo Position: ");
        Serial.println(servoPosition);
        sliderValue = "";  // Clear the slider value for next input
      }
    }
  }
}

// Function to handle movement commands from Bluetooth
void handleMovementCommands() {
  if (SerialBT.available()) {
    char receivedChar = SerialBT.read();
    
    switch (receivedChar) {
      case 'F':  // Move forward
        moveMotors(HIGH, LOW, LOW, HIGH);
        Serial.println("Moving forward");
        break;

      case 'B':  // Move backward
        moveMotors(LOW, HIGH, HIGH, LOW);
        Serial.println("Moving backward");
        break;

      case 'L':  // Turn left
        moveMotors(LOW, HIGH, LOW, HIGH);
        Serial.println("Turning left");
        break;

      case 'R':  // Turn right
        moveMotors(HIGH, LOW, HIGH, LOW);
        Serial.println("Turning right");
        break;

      case 'S':  // Stop
        moveMotors(LOW, LOW, LOW, LOW);
        Serial.println("Stopping");
        break;

      case 'A':  // Reset servo to 90 degrees
        myServo.write(90);
        Serial.println("Servo reset to 90 degrees");
        break;

      default:
        // No valid command received
        break;
    }
  }
}

// Function to move motors
void moveMotors(int m1, int m2, int m3, int m4) {
  digitalWrite(motorPin1, m1);
  digitalWrite(motorPin2, m2);
  digitalWrite(motorPin3, m3);
  digitalWrite(motorPin4, m4);
}
