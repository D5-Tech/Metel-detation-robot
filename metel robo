#include <ESP32Servo.h>
#include <BluetoothSerial.h>

BluetoothSerial SerialBT;
Servo myServo;

int motorPin1 = 18; // GPIO 18
int motorPin2 = 19; // GPIO 19
int motorPin3 = 23; // GPIO 23
int motorPin4 = 22; // GPIO 22
int servoPin = 5;   // GPIO 5
int switchPin = 21; // GPIO 21 for the switch input

String sliderValue = "";  // For storing the slider values
unsigned long previousMillis = 0; 
const long interval = 1000;  // Interval to send "Hello" every 1 second

void setup() {
  // Set motor pins as output
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);

  // Attach the servo motor
  myServo.attach(servoPin);
  myServo.write(90);  // Set initial servo position

  // Initialize Bluetooth serial communication
  SerialBT.begin("ESP32_Car");  // Bluetooth device name
  Serial.begin(9600);
  Serial.println("Bluetooth Car Ready");

  // Set switch pin as input
  pinMode(switchPin, INPUT);
}

void loop() {
  // Read the switch state
  int switchState = digitalRead(switchPin);

  // If the switch is pressed (HIGH signal)
  if (switchState == HIGH) {
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;
      SerialBT.println("Hello");  // Send "Hello" through Bluetooth
      Serial.println("Hello");    // Display "Hello" on the Serial Monitor
    }
  } else {
    // Optionally, print the switch status to the serial monitor when not pressed
    Serial.println("Switch not pressed");
  }

  if (SerialBT.available()) {
    char receivedChar = SerialBT.read();
    
    // Handle slider value command
    if (receivedChar == 'X') {
      if (sliderValue.length() > 0) {
        int sliderPosition = sliderValue.toInt();  
        int servoPosition = map(sliderPosition, 0, 100, 0, 180);  
        myServo.write(servoPosition);  // Set servo position
        Serial.print("Servo Position: ");
        Serial.println(servoPosition);
        sliderValue = "";  // Clear slider value
      }
    } else if (isDigit(receivedChar)) {
      sliderValue += receivedChar;  // Accumulate slider value characters
    } else {
      // Process movement commands
      processMovement(receivedChar);
    }
  }
}

void processMovement(char command) {
  switch (command) {
    case 'F':  // Move forward
      moveMotors(HIGH, LOW, LOW, HIGH);
      Serial.println("Moving forward");
      break;

    case 'B':  // Move backward
      moveMotors(LOW, HIGH, HIGH, LOW);
      Serial.println("Moving backward");
      break;

    case 'L':  // Turn left
      moveMotors(LOW, HIGH, LOW, HIGH);
      Serial.println("Turning left");
      break;

    case 'R':  // Turn right
      moveMotors(HIGH, LOW, HIGH, LOW);
      Serial.println("Turning right");
      break;

    case 'S':  // Stop
      moveMotors(LOW, LOW, LOW, LOW);
      Serial.println("Stopping");
      break;

    case 'A':  // Reset servo to 90 degrees
      myServo.write(90);
      Serial.println("Servo reset to 90 degrees");
      break;

    default:
      // No valid command received
      break;
  }
}

void moveMotors(int m1, int m2, int m3, int m4) {
  digitalWrite(motorPin1, m1);
  digitalWrite(motorPin2, m2);
  digitalWrite(motorPin3, m3);
  digitalWrite(motorPin4, m4);
}
