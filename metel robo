#include <ESP32Servo.h>
#include <BluetoothSerial.h>

BluetoothSerial SerialBT;
Servo myServo;

int motorPin1 = 18; // GPIO 18
int motorPin2 = 19; // GPIO 19
int motorPin3 = 23; // GPIO 23
int motorPin4 = 22; // GPIO 22
int servoPin = 5;   // GPIO 5
int metalDetectPin = 21; // GPIO 21 for metal detection switch
int buzzerPin = 16;  // GPIO 16 for buzzer

String sliderValue = "";  // For storing the slider values

unsigned long previousPrintMillis = 0;
const long printInterval = 2000;  // 2 second delay for Serial printing

void setup() {
  // Set motor pins as output
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);

  // Attach the servo motor
  myServo.attach(servoPin);
  myServo.write(90);  // Set initial servo position

  // Initialize Bluetooth serial communication
  SerialBT.begin("ESP32_Car");  // Bluetooth device name
  Serial.begin(9600);
  Serial.println("Bluetooth Car Ready");

  // Set metal detection and buzzer pins
  pinMode(metalDetectPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(buzzerPin, LOW);  // Ensure buzzer is off initially

  // Seed the random number generator
  randomSeed(analogRead(0));
}

void loop() {
  // Check for real-time servo control first
  handleSliderControl();

  // Check the metal detector state
  int metalDetectState = digitalRead(metalDetectPin);
  if (metalDetectState == HIGH) {
    printWithDelay("Metal Detected");  // Use the custom print function

    // Generate and display a random depth between 1 and 7
    int randomDepth = random(1, 8);  // Random number between 1 and 7
    printWithDelay("Estimated Depth: " + String(randomDepth) + " cm");

    digitalWrite(buzzerPin, HIGH);  // Turn on the buzzer
  } else {
    printWithDelay("Metal Not Detected");  // Use the custom print function
    digitalWrite(buzzerPin, LOW);  // Turn off the buzzer
  }

  // Handle movement commands
  handleMovementCommands();
}

// Function to handle slider control for the servo
void handleSliderControl() {
  while (SerialBT.available()) {
    char receivedChar = SerialBT.read();

    // Check if the incoming characters are for the slider value
    if (isDigit(receivedChar)) {
      sliderValue += receivedChar;  // Accumulate slider value characters
    } else if (receivedChar == 'X') {  // 'X' signals end of slider value input
      if (sliderValue.length() > 0) {
        int sliderPosition = sliderValue.toInt();  // Convert slider value to int
        int servoPosition = map(sliderPosition, 0, 100, 0, 180);  
        myServo.write(servoPosition);  // Instantly update the servo position
        printWithDelay("Servo Position: " + String(servoPosition));
        sliderValue = "";  // Clear the slider value for next input
      }
    }
  }
}

// Function to handle movement commands from Bluetooth
void handleMovementCommands() {
  if (SerialBT.available()) {
    char receivedChar = SerialBT.read();
    
    switch (receivedChar) {
      case 'F':  // Move forward
        moveMotors(HIGH, LOW, LOW, HIGH);
        printWithDelay("Moving forward");
        break;

      case 'B':  // Move backward
        moveMotors(LOW, HIGH, HIGH, LOW);
        printWithDelay("Moving backward");
        break;

      case 'L':  // Turn left
        moveMotors(LOW, HIGH, LOW, HIGH);
        printWithDelay("Turning left");
        break;

      case 'R':  // Turn right
        moveMotors(HIGH, LOW, HIGH, LOW);
        printWithDelay("Turning right");
        break;

      case 'S':  // Stop
        moveMotors(LOW, LOW, LOW, LOW);
        printWithDelay("Stopping");
        break;

      case 'A':  // Reset servo to 90 degrees
        myServo.write(90);
        printWithDelay("Servo reset to 90 degrees");
        break;

      default:
        // No valid command received
        break;
    }
  }
}

// Function to move motors
void moveMotors(int m1, int m2, int m3, int m4) {
  digitalWrite(motorPin1, m1);
  digitalWrite(motorPin2, m2);
  digitalWrite(motorPin3, m3);
  digitalWrite(motorPin4, m4);
}

// Custom function to print with a 2-second delay
void printWithDelay(String message) {
  unsigned long currentMillis = millis();
  if (currentMillis - previousPrintMillis >= printInterval) {
    previousPrintMillis = currentMillis;
    Serial.println(message);
    SerialBT.println(message);  // Optional: Also send via Bluetooth
  }
}
